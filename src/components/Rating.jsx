import { useState } from "react";

export default function Rating({ id, initialRating, handleRating }) {
  const MAX_RATING = 5;
  const [rating, setRating] = useState(initialRating);
  const [hover, setHover] = useState(null);

  const handleOnclick = (newRating) => {
    setRating(newRating);
    handleRating(id, newRating);
  };

  return (
    <div className="flex justify-start gap-x-1.5">
      {[...Array(MAX_RATING)].map((_, index) => {
        const ratingValue = index + 1;
        return (
          <div key={index}>
            <svg
              width="17"
              height="17"
              viewBox="0 0 17 17"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              className="cursor-pointer"
              value={ratingValue}
              onClick={() => handleOnclick(ratingValue)}
              onMouseEnter={() => setHover(ratingValue)}
              onMouseLeave={() => setHover(null)}
            >
              <path
                d="M16.4791 6.33003C16.4791 4.28467 14.8157 2.62067 12.7711 2.62067C12.6822 2.62067 12.5925 2.62401 12.5024 2.63075C11.6226 1.30792 10.132 0.5 8.53116 0.5C6.9304 0.5 5.43982 1.30808 4.55998 2.63075C4.46985 2.62401 4.38015 2.62067 4.29132 2.62067C2.24666 2.62067 0.583252 4.28467 0.583252 6.33003C0.583252 8.196 1.96798 9.7438 3.76337 10.001V15.1273C3.76337 15.8842 4.37913 16.5 5.13603 16.5H11.9263C12.6832 16.5 13.2989 15.8842 13.2989 15.1273V10.001C15.0944 9.7438 16.4791 8.19595 16.4791 6.33003ZM11.9263 15.4441H5.13609C4.96445 15.4441 4.81932 15.299 4.81932 15.1272V10.0015C5.3366 9.9282 5.8277 9.74708 6.27069 9.46544C6.95017 9.83296 7.72297 10.0392 8.53116 10.0392C9.33935 10.0392 10.1121 9.83296 10.7916 9.46549C11.2347 9.74708 11.7258 9.9282 12.243 10.0015V15.1272C12.243 15.299 12.098 15.4441 11.9263 15.4441ZM12.7711 8.98329C12.4157 8.98329 12.0721 8.91385 11.7529 8.7804C12.3954 8.19137 12.8811 7.42574 13.125 6.54584C13.2028 6.26485 13.0382 5.97389 12.7572 5.89599C12.4762 5.81814 12.1853 5.98283 12.1073 6.26377C11.6637 7.86501 10.1931 8.98329 8.53116 8.98329C6.86926 8.98329 5.39871 7.86501 4.95497 6.26377C4.87712 5.98277 4.58632 5.81814 4.30511 5.89599C4.02411 5.97383 3.85948 6.26485 3.93733 6.54584C4.18115 7.42574 4.66691 8.19142 5.30945 8.7804C4.9902 8.91385 4.64666 8.98329 4.29132 8.98329C2.82891 8.98329 1.6392 7.79304 1.6392 6.33003C1.6392 4.86698 2.82896 3.67662 4.29132 3.67662C4.43914 3.67662 4.59133 3.68987 4.74368 3.71595C4.96359 3.75344 5.18382 3.64877 5.29318 3.45407C5.95069 2.28327 7.19141 1.55595 8.5311 1.55595C9.87079 1.55595 11.1115 2.28333 11.7691 3.45413C11.8784 3.64882 12.0986 3.75349 12.3186 3.71595C12.471 3.68987 12.6232 3.67662 12.7709 3.67662C14.2333 3.67662 15.423 4.86698 15.423 6.33003C15.4232 7.79304 14.2334 8.98329 12.7711 8.98329Z"
                fill="#c9cbcc"
                fillOpacity="1"
                className={`cursor-pointer transition duration-150 ease-in-out ${
                  ratingValue <= (hover || rating) ? "fill-accent" : "#c9cbcc"
                }`}
              />
            </svg>
          </div>
        );
      })}
    </div>
  );
}
